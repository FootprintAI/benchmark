global
        # Maximum number of connections
        maxconn 3000
        # OS user to HAProxy
        user haproxy
        # OS group to HAProxy
        group haproxy
        # daemon mode on (background)
        daemon
        # Amount of processor cores used by HAProxy
        nbproc 1
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats timeout 30s
# Parameters for frontend and backend
defaults
        log     global
        mode    http
        #option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http
        # We are going to serve HTTP pages
        mode http
        # Enable statistics
        #stats enable
        # Define user:password to access statistics page (CHANGE IT and record it) <<<<<<<<<<
        #stats auth iamauser:iamapasswd
        # The statistics should be refreshed for each one second
        #stats refresh 1s
        # The URI to access statistics page
        #stats uri /stats                                                           <<<<<<<<<<<
        # Load balance method: Static Round Robin (Allow define different weights for different servers )
        balance static-rr
        # Forces HTTP 1.0
        option httpclose
        # Sets HAProxy to forward the user's IP to the application server
        # option forwardfor
        # Maximum backend connection time
        timeout connect 3000ms
        # Maximum wait time of the backend response
        timeout server 50000ms
        # Maximum waiting time of the user's communication to frontend (the firewall)
        timeout client 50000ms
        # Other parameters can be setted here
frontend http_in
        mode http
        bind *:18080
        option forwardfor

        acl host_server1 hdr(host) -i bench.dev01.footprint-ai.com

        use_backend http_server1 if host_server1

backend http_server1
        mode http
        option forwardfor
        server server 172.17.255.200:80

frontend https_in
        mode tcp
        bind *:18443
        acl tls req.ssl_hello_type 1
        tcp-request inspect-delay 5s
        tcp-request content accept if tls

        acl host_server1 req.ssl_sni -i bench.dev01.footprint-ai.com

        use_backend https_server1 if host_server1

# Backend definitions (http servers: containers)
# The "*-big" servers have twice processing power and memory than "*-small" servers, so the weights are 2 and 1 respectively

backend https_server1
        mode tcp
        server server 172.17.255.200:443 check

